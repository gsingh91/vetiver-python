{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vetiver The goal of vetiver is to give data scientists and other model-builders the tools to deploy their model to a remote endpoint. It is the Python counterpart to the R package vetiver . Key features include: Simple: designed to fit into a data scientist's natural workflow Robust: ability to check input data types to minimize type failures in a model Advanced support: easily deploy multiple endpoints to handle pre- and post- processing Based on FastAPI , using OpenAPI Source code available on GitHub.","title":"Home"},{"location":"#vetiver","text":"The goal of vetiver is to give data scientists and other model-builders the tools to deploy their model to a remote endpoint. It is the Python counterpart to the R package vetiver . Key features include: Simple: designed to fit into a data scientist's natural workflow Robust: ability to check input data types to minimize type failures in a model Advanced support: easily deploy multiple endpoints to handle pre- and post- processing Based on FastAPI , using OpenAPI Source code available on GitHub.","title":"Vetiver"},{"location":"examples/","text":"Examples If you're looking for more vetiver content, check out this repo of examples .","title":"Examples"},{"location":"examples/#examples","text":"If you're looking for more vetiver content, check out this repo of examples .","title":"Examples"},{"location":"get-started/","text":"vetiver is an MLOps framework intended to extend a data science workflow to deployment after a model has been created. Installation vetiver can be installed via pip with PyPI . pip install vetiver You can also install the development version from GitHub. pip install git+https://github.com/isabelizimm/vetiver Get started Vetiver focuses on two main objects: VetiverModel() and VetiverAPI() . A VetiverModel collects all the information needed for deploying a trained model, while a VetiverAPI deploys the model to a REST endpoint. The example below shows a minimal deployment of an arbitrary model. from vetiver import dummy , VetiverModel , VetiverAPI X , y = dummy . get_dummy_data () model = dummy . get_dummy_model () . fit ( X , y ) v = VetiverModel ( model , save_ptype = True , ptype_data = X ) my_api = VetiverAPI ( v ) my_api . run () (This script is complete, it should run \"as is\")","title":"Get Started"},{"location":"get-started/#installation","text":"vetiver can be installed via pip with PyPI . pip install vetiver You can also install the development version from GitHub. pip install git+https://github.com/isabelizimm/vetiver","title":"Installation"},{"location":"get-started/#get-started","text":"Vetiver focuses on two main objects: VetiverModel() and VetiverAPI() . A VetiverModel collects all the information needed for deploying a trained model, while a VetiverAPI deploys the model to a REST endpoint. The example below shows a minimal deployment of an arbitrary model. from vetiver import dummy , VetiverModel , VetiverAPI X , y = dummy . get_dummy_data () model = dummy . get_dummy_model () . fit ( X , y ) v = VetiverModel ( model , save_ptype = True , ptype_data = X ) my_api = VetiverAPI ( v ) my_api . run () (This script is complete, it should run \"as is\")","title":"Get started"},{"location":"vetiver-api/","text":"VetiverAPI This tutorial shows you how to use VetiverAPI() with its core features, step by step. Minimal deployment The simplest VetiverAPI deployment includes a trained model with a predict method, inside a VetiverModel . from vetiver import dummy, VetiverModel, VetiverAPI X, y = dummy.get_dummy_data() model = dummy.get_dummy_model().fit(X, y) v = VetiverModel(model = model, save_ptype = True, ptype_data = X) my_api = VetiverAPI(v) my_api.run() (This script is complete, it should run \"as is\") Note In this example, Vetiver is invoking a data prototype, or ptype , which requires sample data to create. This is an optional configuration, but it creates more verbose documentation within the API, as well as allows for some basic type-checking within the API itself. To turn this off, set save_ptype = False . In the output, there will be a line with something similiar to: INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Follow the link to the API at http://127.0.0.1:8000 . You will be redirected to the automatic API documentation provided by Rapidoc . From there, you can send requests to your model, see example curl commands, and interact with your API. Multiple endpoints More advanced use cases may require multiple endpoints to be created for pre-processing or post-processing data. You can use vetiver_post() to create a new POST endpoint that implements a custom function. In the example below, the endpoint \"new_endpoint\" sums all the input data. Note The method vetiver_post() currently handles all data as a Series type. from vetiver import dummy, VetiverModel, VetiverAPI X, y = dummy.get_dummy_data() model = dummy.get_dummy_model().fit(X, y) v = VetiverModel(model = model, save_ptype = True, ptype_data = X) my_api = VetiverAPI(v) # new endpoint def sum_numbers(x): return x.sum() my_api.vetiver_post(endpoint_fx = sum_numbers, endpoint_name = \"new_endpoint\") my_api.run() (This script is complete, it should run \"as is\")","title":"VetiverAPI"},{"location":"vetiver-api/#vetiverapi","text":"This tutorial shows you how to use VetiverAPI() with its core features, step by step.","title":"VetiverAPI"},{"location":"vetiver-api/#minimal-deployment","text":"The simplest VetiverAPI deployment includes a trained model with a predict method, inside a VetiverModel . from vetiver import dummy, VetiverModel, VetiverAPI X, y = dummy.get_dummy_data() model = dummy.get_dummy_model().fit(X, y) v = VetiverModel(model = model, save_ptype = True, ptype_data = X) my_api = VetiverAPI(v) my_api.run() (This script is complete, it should run \"as is\") Note In this example, Vetiver is invoking a data prototype, or ptype , which requires sample data to create. This is an optional configuration, but it creates more verbose documentation within the API, as well as allows for some basic type-checking within the API itself. To turn this off, set save_ptype = False . In the output, there will be a line with something similiar to: INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Follow the link to the API at http://127.0.0.1:8000 . You will be redirected to the automatic API documentation provided by Rapidoc . From there, you can send requests to your model, see example curl commands, and interact with your API.","title":"Minimal deployment"},{"location":"vetiver-api/#multiple-endpoints","text":"More advanced use cases may require multiple endpoints to be created for pre-processing or post-processing data. You can use vetiver_post() to create a new POST endpoint that implements a custom function. In the example below, the endpoint \"new_endpoint\" sums all the input data. Note The method vetiver_post() currently handles all data as a Series type. from vetiver import dummy, VetiverModel, VetiverAPI X, y = dummy.get_dummy_data() model = dummy.get_dummy_model().fit(X, y) v = VetiverModel(model = model, save_ptype = True, ptype_data = X) my_api = VetiverAPI(v) # new endpoint def sum_numbers(x): return x.sum() my_api.vetiver_post(endpoint_fx = sum_numbers, endpoint_name = \"new_endpoint\") my_api.run() (This script is complete, it should run \"as is\")","title":"Multiple endpoints"},{"location":"vetiver-model/","text":"VetiverModel This tutorial shows you how to use VetiverModel() with its core features, step by step. Users will start with any trained model. Currently, Vetiver supports scikit-learn models, with other model support on its way. from vetiver import dummy , VetiverModel , VetiverAPI X , y = dummy . get_dummy_data () model = dummy . get_dummy_model () . fit ( X , y ) v = VetiverModel ( model , save_ptype = True , ptype_data = X ) The save_ptype and ptype_data arguments refer to an input data prototype , or ptype . This ptype is an automatically created Pydantic BaseModel that stores the types of the data that the API can expect when deployed. To enable this feature, set save_ptype = True and set ptype_data equal to training data. You can turn this feature off by setting save_ptype = False and not passing in any ptype_data .","title":"VetiverModel"},{"location":"vetiver-model/#vetivermodel","text":"This tutorial shows you how to use VetiverModel() with its core features, step by step. Users will start with any trained model. Currently, Vetiver supports scikit-learn models, with other model support on its way. from vetiver import dummy , VetiverModel , VetiverAPI X , y = dummy . get_dummy_data () model = dummy . get_dummy_model () . fit ( X , y ) v = VetiverModel ( model , save_ptype = True , ptype_data = X ) The save_ptype and ptype_data arguments refer to an input data prototype , or ptype . This ptype is an automatically created Pydantic BaseModel that stores the types of the data that the API can expect when deployed. To enable this feature, set save_ptype = True and set ptype_data equal to training data. You can turn this feature off by setting save_ptype = False and not passing in any ptype_data .","title":"VetiverModel"}]}